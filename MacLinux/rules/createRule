#!/bin/bash 
# ZipFile name = $RULE_NAME.zip
if [ $# -ne 5 ]
    then
        printf $'Usage: ./createRule PROFILE RUNTIME RULE_NAME CODE_FILE APPLICABLE_RESOURCE_TYPES\n'
		printf $'Example: ./createRule myCLIprofile nodejs desiredInstanceTypeRule codefile "AWS::EC2::Instance,AWS::EC2::VPC"\n'
        printf $'Use "default" for PROFILE if you want to use the default profile'
        echo
        exit 1
fi
PROFILE=$1
RUNTIME=$2
RULE_NAME=$3
CODE_FILE=$4
echo "CODEFILE" $CODE_FILE

MODULE_NAME=$(basename "$CODE_FILE")
MODULE_NAME="${MODULE_NAME%.*}"
echo "MODULE is " $MODULE_NAME

RESOURCE_TYPES=$5
if [ "$RUNTIME" = 'nodejs' ]
    then
        LAMBDA_RUNTIME='nodejs6.10'
elif [ "$RUNTIME" = 'python' ]
    then
        LAMBDA_RUNTIME='python3.6'     
else
    printf 'RUNTIME parameter must be either nodejs or python' 
    exit 1   
fi                
RESOURCE_TYPES=${RESOURCE_TYPES//\"/}
RESOURCE_TYPES=${RESOURCE_TYPES//,/\",\"}
RESOURCE_TYPES="[\"$RESOURCE_TYPES\"]"
zip -j $RULE_NAME.zip $CODE_FILE > /dev/null
if aws --profile $PROFILE iam get-role --role-name config_lambda_basic_execution 2>&1 | grep -q 'Role not found'
    then
        printf "Creating IAM role config_lambda_basic_execution\n"
        aws --profile $PROFILE iam create-role --role-name config_lambda_basic_execution --assume-role-policy-document file://ruleUtil/lambdaTrustPolicy.json > /dev/null 2>&1
        aws --profile $PROFILE iam attach-role-policy --role-name config_lambda_basic_execution --policy-arn arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
        aws --profile $PROFILE iam attach-role-policy --role-name config_lambda_basic_execution --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        SLEEP_CYCLES=0
        while [ $SLEEP_CYCLES -ne 5 ]
        do 
            printf "Waiting for IAM role to propagate\n"
            sleep 8
            SLEEP_CYCLES=$((SLEEP_CYCLES + 1))
        done
fi
LAMBDA_ROLE_ARN=$(aws --profile $PROFILE iam get-role --role-name config_lambda_basic_execution --query Role.Arn --output text)
printf "Creating/Updating Lambda function $RULE_NAME\n"
aws --profile $PROFILE lambda create-function --function-name $RULE_NAME --zip-file fileb://$RULE_NAME.zip --runtime $LAMBDA_RUNTIME --role $LAMBDA_ROLE_ARN --handler $MODULE_NAME.lambda_handler > /dev/null
aws --profile $PROFILE lambda update-function-code --function-name $RULE_NAME --zip-file fileb://$RULE_NAME.zip > /dev/null
aws --profile $PROFILE lambda add-permission --function-name $RULE_NAME --statement-id 1 --principal config.amazonaws.com --action lambda:InvokeFunction > /dev/null 2>&1
LAMBDA_ARN=$(aws --profile $PROFILE lambda get-function --function-name $RULE_NAME --query Configuration.FunctionArn --output text)
CONFIG_RULE=$(<"ruleUtil/configRule.json")
PARAMETERS=$(<"ruleCode/ruleParameters.txt")
PARAMETERS=${PARAMETERS//\"/\\\"}
CONFIG_RULE=${CONFIG_RULE//<RULE_NAME>/\"$RULE_NAME\"}
CONFIG_RULE=${CONFIG_RULE//<RESOURCE_TYPES>/$RESOURCE_TYPES}
CONFIG_RULE=${CONFIG_RULE//<LAMBDA_ARN>/\"$LAMBDA_ARN\"}
CONFIG_RULE=${CONFIG_RULE//<PARAMETERS>/$PARAMETERS}
printf "Creating/Updating Config rule $RULE_NAME\n"
aws --profile $PROFILE configservice put-config-rule --config-rule ''"$CONFIG_RULE"''
printf "\nRule $RULE_NAME created/updated. Ignore any \"already exists\" messages.\n"
