###############################################################################
# PYTHON PROJECT CONFIGS
###############################################################################

# -----------------------------------------------------------------------------
# BLACK
# -----------------------------------------------------------------------------
[tool.black]
target-version = ["py38"]

# -----------------------------------------------------------------------------
# ISORT
# -----------------------------------------------------------------------------
[tool.isort]
profile = "black"
virtual_env = ".venv"

# -----------------------------------------------------------------------------
# PYLINT
# -----------------------------------------------------------------------------
[tool.pylint.MASTER]

# Load Plugins
# pylint_pytest: Suppress pytest related false-positives
# pylint_json2html: Support jsonextended output-format
load-plugins = "pylint_pytest,pylint_json2html"

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs = 0

# Pickle collected data for later comparisons.
persistent = "no"

# Min score threshold
fail-under = "9.0"

# Files or directories to be skipped. They should be base names, not paths.
ignore = "mugc.py"

[tool.pylint.BASIC]

# Naming conventions
# Allowed: lower-cased single words, or snake_case words
attr-rgx =  "^(?:[a-z0-9_]+)$"
argument-rgx =  "^(?:[a-z0-9_]+)$"
variable-rgx =  "^(?:[a-z0-9_]+)$"
inlinevar-rgx =  "^(?:[a-z0-9_]+)$"

# Display hints on above naming conventions
include-naming-hint = "yes"

[tool.pylint."MESSAGES CONTROL"]

# Why?
# * broad-except: We are trying to catch all exceptions
# * duplicate-code: Caused by similar import statements
# * line-too-long: black takes care of this
# * logging-fstring-interpolation: why would we NOT use f-strings ever
# * missing-module-docstring: we document each function/class/method

disable = """
broad-except,
duplicate-code,
line-too-long,
logging-fstring-interpolation,
missing-module-docstring,
"""

# -----------------------------------------------------------------------------
# PYTEST
# -----------------------------------------------------------------------------
[tool.pytest.ini_options]

# classes called `Test`
# https://docs.pytest.org/en/latest/example/pythoncollection.html#changing-naming-conventions
python_files = "test_*.py"
python_classes = "PyTest"
python_functions = "test_*"

# CLI Options
addopts = """\
  --exitfirst \
  --strict-config \
  -vv \
  -p no:warnings \
  --junit-xml=.reports/junit.xml \
  --report-log=.reports/pytest-log.json \
  --cov=rdk \
  --cov-config=.coveragerc \
  --no-cov-on-fail \
  --cov-report=term \
  --cov-report=html \
  --cov-report=xml
  """

# Enable `pytest` CLI logging
log_cli       = true
log_cli_level = "INFO"

# Set package log level
log_level = "DEBUG"
log_date_format = "%Y-%m-%dT%H:%M:%S%z"
log_format = "%(asctime)s | %(levelname)-8s | %(message)s"

# Junit suite-name
junit_suite_name = "rdk"

# pytest-console-scripts options
script_launch_mode = "subprocess"

# pytest-env
env = [
  # Fake creds for moto
  "AWS_ACCESS_KEY_ID=testing",
  "AWS_SECRET_ACCESS_KEY=testing",
  "AWS_SESSION_TOKEN=testing",
  "AWS_SECURITY_TOKEN=testing",
  "AWS_DEFAULT_REGION=us-east-1",
  "AWS_REGION=us-east-1",
  "MOTO_ACCOUNT_ID=123456789012",
]

###############################################################################
