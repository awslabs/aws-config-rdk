{
 "Resources": {
  "APIGATEWAYPRIVATEC8B60F10": {
   "Type": "AWS::Config::ConfigRule",
   "Properties": {
    "Source": {
     "CustomPolicyDetails": {
      "EnableDebugLogDelivery": false,
      "PolicyRuntime": "guard-2.x.x",
      "PolicyText": "#\n# Select all AWS::ApiGateway::RestApi resources\n#     present in the Resources section of the template. \n#\nlet api_gws = Resources.*[ Type == 'AWS::ApiGateway::RestApi']\n\n#\n# Rule intent:         \n# 1) All AWS::ApiGateway::RestApi resources deployed must be private.                                            \n# 2) All AWS::ApiGateway::RestApi resources deployed must have at least one AWS Identity and Access Management (IAM) policy condition key to allow access from a VPC.\n#\n# Expectations:        \n# 1) SKIP when there are no AWS::ApiGateway::RestApi resources in the template.  \n# 2) PASS when:\n#     ALL AWS::ApiGateway::RestApi resources in the template have the EndpointConfiguration property set to Type: PRIVATE. \n#     ALL AWS::ApiGateway::RestApi resources in the template have one IAM condition key specified in the Policy property with aws:sourceVpc or :SourceVpc.    \n# 3) FAIL otherwise.                                                                                  \n#\n#\n\nrule check_rest_api_is_private when %api_gws !empty {     \n    %api_gws {\n        Properties.EndpointConfiguration.Types[*] == \"PRIVATE\"                             \n    }  \n}       \n\nrule check_rest_api_has_vpc_access when check_rest_api_is_private {\n    %api_gws {\n        Properties {\n            #\n            # ALL AWS::ApiGateway::RestApi resources in the template have one IAM condition key specified in the Policy property with \n            #     aws:sourceVpc or :SourceVpc\n            #           \n            some Policy.Statement[*] {\n                Condition.*[ keys == /aws:[sS]ource(Vpc|VPC|Vpce|VPCE)/ ] !empty\n            }\n        }\n    }\n}"
     },
     "Owner": "CUSTOM_POLICY",
     "SourceDetails": [
      {
       "EventSource": "aws.config",
       "MessageType": "ConfigurationItemChangeNotification"
      },
      {
       "EventSource": "aws.config",
       "MessageType": "OversizedConfigurationItemChangeNotification"
      }
     ]
    },
    "ConfigRuleName": "API_GATEWAY_PRIVATE",
    "Description": "API_GATEWAY_PRIVATE",
    "InputParameters": {}
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/API_GATEWAY_PRIVATE/Resource"
   }
  },
  "APIGATEWAYPRIVATERemediationConfiguration": {
   "Type": "AWS::Config::RemediationConfiguration",
   "Properties": {
    "ConfigRuleName": "API_GATEWAY_PRIVATE",
    "TargetId": "AWS-PublishSNSNotification",
    "TargetType": "SSM_DOCUMENT",
    "Automatic": true,
    "MaximumAutomaticAttempts": 2,
    "Parameters": {
     "AutomationAssumeRole": {
      "StaticValue": {
       "Values": [
        {
         "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/sns-access"
        }
       ]
      }
     },
     "Message": {
      "StaticValue": {
       "Values": [
        "hi"
       ]
      }
     },
     "TopicArn": {
      "StaticValue": {
       "Values": [
        {
         "Fn::Sub": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:rules-notification"
        }
       ]
      }
     }
    },
    "ResourceType": "AWS::EC2::Instance",
    "RetryAttemptSeconds": 2,
    "TargetVersion": "1"
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/API_GATEWAY_PRIVATERemediationConfiguration"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/y2LQQ7CIBBFz9J9Ga1d6J4LNHgAg0B1LDAJDDFN07tXS1c/7738C1xvcG70NwtjJ+HxCcudtZnan3oYiiO+YJElM4WBPJq5lWOUu1fFuz8pF5xFzUhHKGmHtcZMJRl33CzWMsz8pnjqoeugbz4ZUaQSGYMDVXcDBAyx15oAAAA="
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}