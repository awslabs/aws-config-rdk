#!/usr/bin/env bash

###############################################################################
# pre-push HOOK
###############################################################################

#
# Based on:
# https://github.com/git/git/blob/master/templates/hooks--pre-push.sample
#

# Bash Options
set -eu
set -o pipefail

# Read arguments
declare remote_name="${1}"
declare remote_url="${2}"

# Zero hash
declare zero
zero=$(
  git hash-object --stdin < /dev/null \
    | tr "0-9a-z" "0"
) || exit 0

# Parse STDIN
while read -r local_ref local_oid remote_ref remote_oid; do
  if [[ "${local_oid}" = "${zero}" ]]; then
    # Handle delete
    # Nothing to do
    continue
  fi

  # get commit range
  range=""

  if [[ "${remote_oid}" = "${zero}" ]]; then
    # New branch, examine all new commits
    range="${remote_name}..${local_oid}"
  else
    # Update to existing branch, examine new commits
    range="${remote_oid}..${local_oid}"
  fi

  # lint commits
  if [[ "${range}" != "" ]]; then
    if command -v "pipenv" > /dev/null 2>&1; then
      if ! pipenv run -- gitlint --ignore-stdin --commits "${range}"; then

        cat << 'EO_BAD_COMMIT_MSG'

Commits being pushed are not compliant with Conventional Commits.

For more information on writing commit messages, please review:
https://www.conventionalcommits.org/

To fix your commit messages, you can do one of the following:
* Use `git commit --ammend` if you have only one commit to fix
* Use `git rebase -i HEAD~n` to fix the last n commits. In the
  interactive rebase session, you can choose `edit` to fix each
  non-compliant commit.

To bypass this verification intentionally, you can use the `--no-verify`
option. For e.g., `git push --no-verify`
EO_BAD_COMMIT_MSG

        exit 1
      fi
    fi
  fi
done

# Done
exit 0

###############################################################################
